/*   Generated by AspectJ version 1.0.4 */
class Logging {
  static org.aspectj.runtime.reflect.Factory ajc$JPF;
  public static org.aspectj.lang.JoinPoint.StaticPart fullName$ajcjp1;
  public static org.aspectj.lang.JoinPoint.StaticPart getSignature$ajcjp2;
  public static org.aspectj.runtime.internal.CFlowStack cflow$ajc0;
  public final void before0$ajc(Person p, 
      org.aspectj.lang.JoinPoint.StaticPart thisJoinPointStaticPart) {
    System.out.println(this.fullName$method_call0(p) + " received message " + 
        this.getSignature$method_call(thisJoinPointStaticPart));
  } 

  Logging() {
    super();
  } 
  public static Logging aspectInstance;
  public static Logging aspectOf() {
    return Logging.aspectInstance;
  } 

  public static boolean hasAspect() {
    return Logging.aspectInstance != null;
  } 

  private String fullName$method_call0(Person target) {
    {
      if (Logging.hasAspect() && !Logging.cflow$ajc0.isValid()) Logging.aspectInstance.before0$ajc(
          target, Logging.fullName$ajcjp1);
    } 
    Logging.cflow$ajc0.push(new org.aspectj.runtime.CFlow());
    try {
      return target.fullName$ajcPostCall();
    } finally {
      Logging.cflow$ajc0.pop();
    } 
  } 

  private org.aspectj.lang.Signature getSignature$method_call(
      org.aspectj.lang.JoinPoint.StaticPart target) {
    {
      if (Logging.hasAspect() && (target instanceof Person) && !Logging.cflow$ajc0.isValid()) 
          Logging.aspectInstance.before0$ajc(((Person)(target)), Logging.getSignature$ajcjp2);
    } 
    return target.getSignature();
  } 

  static {
    Logging.ajc$JPF = new org.aspectj.runtime.reflect.Factory("Person.java", Logging.class);
    Logging.fullName$ajcjp1 = Logging.ajc$JPF.makeSJP("method-call", 
        Logging.ajc$JPF.makeMethodSig("0-fullName-Person----java.lang.String-"), 18, 24);
    Logging.getSignature$ajcjp2 = Logging.ajc$JPF.makeSJP("method-call", 
        Logging.ajc$JPF.makeMethodSig(
        "401-getSignature-org.aspectj.lang.JoinPoint----org.aspectj.lang.Signature-"), 19, 24);
    Logging.cflow$ajc0 = new org.aspectj.runtime.internal.CFlowStack();
    Logging.aspectInstance = new Logging();
  } 

} 
